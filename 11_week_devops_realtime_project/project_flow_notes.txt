*************Launching EC2 instance*****************
step1: select AMI Linux
step2: Instance type - t2.medium
step3: skip
step4: skip
step5: Name - Jenkins
step6: selected an existing security group , all tcp port 0-65535
step7: review n launch 

selected ppk file and launch the instances


**************GitHub*************
open github and copy the link

https://github.com/damodaranj/my-app

*************EC2****************
open putty and login with the jenkins instance

sudo su -
yum install git -y 

install jenkins redhat
----------------------
https://wiki.jenkins.io/display/JENKINS//Installing+Jenkins+on+Red+Hat+distributions

Installation of LTS version
----------------------------
sudo wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins.io/redhat-stable/jenkins.repo
sudo rpm --import http://pkg.jenkins.io/redhat-stable/jenkins.io.key
sudo yum install jenkins

Installation of Java
--------------------
sudo yum install java

---------------
sudo service jenkins start
chkconfig jenkins on

-----------
copy the ec2 public ip address add :8080 jenkins will open

cat /var/lib/jenkins/secrets/initialAdminPassword

**********Jenkins**********

click on Install suggested plugins

---------
yum install docker -y
service docker start 

open the link and click on 3.6.3
https://mirrors.estointernet.in/apache/maven/maven-3/
https://mirrors.estointernet.in/apache/maven/maven-3/3.6.3/binaries/

cd /opt 
wget https://mirrors.estointernet.in/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz

ls -ltr
tar -xvf apache-maven-3.6.3-bin.tar.gz
ls -ltr
cd /opt
ls -ltr
cd apache-maven-3.6.3/
ls -ltr


go to github and see src folder, then look into dockerfile, jenkins file, pom.xml
pom - project object model


**********Jenkins**********
Create Admin User and go to jenkins homepage
- click on manage jenkins
  click on Manage Plugins
  click on Availabe tab and search for maven 
  select maven integration and click on install without restart
  
- take the code from jenkinsfile

node{
   stage('SCM Checkout'){
     git 'https://github.com/damodaranj/my-app.git'
   }
   stage('Compile-Package'){

      def mvnHome =  tool name: 'maven3', type: 'maven'   
      sh "${mvnHome}/bin/mvn clean package"
	  sh 'mv target/myweb*.war target/newapp.war'
   }
}
- Click on manage jenkins
  click on Global Tool Configuration
  Click on Mavne Installation -> Add Maven and uncheck the install automatically
  give name as maven3
  

cd /opt
ls-ltr
cd apache-maven-3.6.3/
pwd

  copy the pwd path and paste it on MavenHome
  save it

cd bin/
ls -ltr

- Copy the code and click on new item
  Enter item name - myproject 
  click on Pipeline
  go to pipeline tab
  paste the code from jenkins file as groovy sandbox and save it
  it will navigate to pipeline myproject page
  click on build now
  and check the build history 
  it will display the pipeline stage view
  check the console ouput

- take the code from jenkinsfile

  stage('Docker Image Push'){
   withCredentials([string(credentialsId: 'dockerPass', variable: 'dockerPassword')]) {
   sh "docker login -u saidamo -p ${dockerPassword}"  ------> give your dockerhub crenditials
    }
   sh 'docker push saidamo/myweb:0.0.2'
   }

   stage('Docker deployment'){
   sh 'docker run -d -p 8090:8080 --name tomcattest saidamo/myweb:0.0.2' 
   }

  - Add the cod to pipeline and click on build now then it will display the stage view

docker commands
---------------
docker image build
docker build -t <imagename> .
how to push docker image to dockerhub

1. Login
docker login -u <username> 
docker push <imagename>


sudo su -
chmod 777 /var/run/docker.sock


error - could not find crenditals entry with ID 'dockerpass'

- Go to dashboard, click on manage jenkins
  click on Manage crenditals
  click on store and click on global crend..
  add crenditals and save (select secret text as username and fill otherdetails n save)
  

open duplicate session (putty)
sudo su -
cd /var/lib/jenkins/workspace
ls -ltr
cd myproject
ls -ltr


-  copy the ipaddress from ec2 instance and add :8090/newapp/ - it should work 



day 2:
------

*************Sonarqube**************

https://www.sonarqube.org/

Sonarqube - all developers to write cleaner and safer code.
27 langugaes supports sonarqube

pre-requisites for sonarqube:
-----------------------------
- need 4 gb ram machine 
- test data will be stored in db, so need database (aws rds --mysql)
- need java openjdk
- need to create user, schema, acesss --- db info
- should not start it with root user



************Ec2************
create ec2 instance with the name sonarqube and t2.medium 

**********RDS***********
creating RDS 

click on Database side menu 
click on create datbase 
---> select engine (mysql)
check the eligible for RDS Free Usage Tier 
---->Specify db details (MySql - 5.7.26)
 settings (mysonar, admin, admin123)
----> Configure advanced settings
vpc security group (choose existing security group -- openall )
dataoptions (mysonar, 
uncheck enable deletion protection -- create database


click on view db instances



***********Ec2 sonarqube server***********
ec2-user
sudo su -
yum install java-1.8.0 (latest version 1.8.0)


---> accessing connected database with endpoint 

yum install mysql -y
mysql -h <endpoint_link> -P 3306 -u <username-admin> -p 
EnterPwd : admin123

now creating mysql database in ec2 server reference sonarqube document

- CREATE DATABASE sonar CHARACTER SET utf8 COLLATE utf8_general_ci;
- CREATE USER sonar@localhost IDENTIFIED BY 'sonar';
- CREATE USER sonar@'%' IDENTIFIED BY 'sonar';
- GRANT ALL ON sonar.* TO sonar@localhost;
- GRANT ALL ON sonar.* TO sonar@'%';

----> created db , local n remote user, permissionsto user----

exit


cd /opt/
ls -ltr

Gonna download sonarqube with the below cmnds in opt folder path

wget https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-6.7.6.zip
ls -ltr
unzip sonarqube-6.7.6.zip
ls -ltr
cd sonarqube-6.7.6/
cd conf/
ls -ltr
in conf folder there will be 2 files

---- 2 important files of sonarqube is "wrapper.conf and sonar.properties"-----

open and edit sonar.properties file

vi sonar.properties
  - In database uncomment the 2 lines "sonar.jdbc.username & sonar.jdbc.password"
  - give the db username n password
  - uncomment the mysql line and replace localhost with rds endpoint link
  - uncomment the sonar.web.host=0.0.0.0
  - uncomment sonar.web.context=/sonar
  - uncomment sonar.web.port = 9000
  - :wq

vi wrapper.conf
  - add the java specify path
Java path  /usr/lib/jvm/java-1.8.0.282.b08-1.amzn2.0.1.x86_64/jre/bin

---java path----
 - cd /usr/lib/jvm/java-1.8.0.282.b08-1.amzn2.0.1.x86_64/jre/bin
ls -ltr
pwd
---------


cd /opt/sonarqube-6.7.6/conf/
ls -ltr

vi wrapper.conf
add the path in wrapper.java.command=/usr/lib/jvm/java-1.8.0.282.b08-1.amzn2.0.1.x86_64/jre/bin
:wq


 -----should not start it with root user -- "elastic search" component wont allow the sonarqube to start in root user

we have to change the permission 

cd /opt/sonarqube-6.7.6/bin/
ls -ltr
cd linux-x86-64
ls -ltr

permission changing with the below command:
chown -R ec2-user:ec2-user /opt/sonarqube-6.7.6
exit

exit from root user

cd /opt/sonarqube-6.7.6/bin/linux-x86-64/
ls -ltr
./sonar.sh start


-----sonarqube access from instance ipaddress----------
ip:9000/sonar

- Login to sonarqube
- Provide a token name(sonar) & generate
- have to note the token
- through that token jenkins will access the sonarqube

Now integrating jenkins & sonarqube
-----------------------------------

login to jenkins
click on Manage Jenkins ---> click on Manage plugins ---> Available (search in sonar)
click on SonarQube Scanner ---> install withoit restart
click on manage plugins --> manage crenditals ---> jenkins ---> global crenditials ---> add crenditials
secret test, secret key add, id - sonar, description -sonartoken


click on build history
add 2 stages in pipeline tab

node{
   stage('SCM Checkout'){
     git 'https://github.com/damodaranj/my-app.git'
   }
   stage('Compile-Package'){

      def mvnHome =  tool name: 'maven3', type: 'maven'   
      sh "${mvnHome}/bin/mvn clean package"
	  sh 'mv target/myweb*.war target/newapp.war'
   }
   stage('SonarQube Analysis') {
	        def mvnHome =  tool name: 'maven3', type: 'maven'
	        withSonarQubeEnv('sonar') { 
	          sh "${mvnHome}/bin/mvn sonar:sonar"
	        }
	    }
   stage('Build Docker Imager'){
   sh 'docker build -t saidamo/myweb:0.0.2 .'
   }
   stage('Docker Image Push'){
   withCredentials([string(credentialsId: 'dockerPass', variable: 'dockerPassword')]) {
   sh "docker login -u saidamo -p ${dockerPassword}"
    }
   sh 'docker push saidamo/myweb:0.0.2'
   }
   stage('Remove Previous Container'){
	try{
		sh 'docker rm -f tomcattest'
	}catch(error){
		//  do nothing if there is an exception
	}
   stage('Docker deployment'){
   sh 'docker run -d -p 8090:8080 --name tomcattest saidamo/myweb:0.0.2' 
   }
}
}


----- save the code

manage jenkins --> cofigure system --> search for sonar ctrl+F and add sonar name, server url, authentication token, 

and click on build now

stage view looks like ---> SCM Checkout, Compile package, SonarQube Analysis, Build Docker Image, Docker Image push, remove previous container, docker deployment


go and check the sonarqube site (Server)

Quality gates -- devlopers will work on it
-------------------------------------------------------
for all plugins -- plugins.jenkins.io/docker-plugin/
------------------------------------------------------


***********NEXUS Artifactory*****************it stores the private docker image in to the server
there are 2 artifactory tools 
1. Nexus 2. Jfrog

pre-reqisites
-------------
4gb ram
java

****Launch EC2 instance with the name of Nexus****

ec2-user
sudo su -
yum install java-1.8.0


https://help.sonatype.com/repomanager3/download
go to nexus site and copy the unix link - https://help.sonatype.com/repomanager3/download

cd /opt/
wget https://help.sonatype.com/repomanager3/download
ls -ltr
tar -xvf latest-unix.tar.gz
ls -ltr

----------
search in google as -- nexus artifactory to store containers
https://blog.sonatype.com/using-nexus-3-as-your-repository-part-3-docker-images
-----------

cd nexus-3.32.0-03/
ls -ltr
cd bin/
./nexus start
./nexus status

copy the nexus public ip
<ip>:8081

pwd
copy the path 

**********Nexus*********
signin
give username 
to know the password have to go the mentioned path in the webscreen  -- /opt/sonatype-work/nexus3/admin.password

open duplicate session or go to root
cat /opt/sonatype-work/nexus3/admin.password
set new password

pop will come as "Configure Anonymous Access"
click on enable but in real time we use disable.

click on settings --> click on repositories 
click on create repository and select docker(hosted)
  give name as docker private
  http : 8083 (it's private artifactory port number)
  check the enable docker v1 API (if we didnt enable means we cant able to access it to client or ec2 machine)
  click on create repository


come back to root
install docker 
yum install docker -y
create a file  vi /etc/docker/daemon.json

https://qiita.com/leechungkyu/items/86cad0396cf95b3b6973  -- copy the code and paste it in vi editor

{
        "insecure-registries" : ["182.252.133.70:5000"]
}

:wq

have to restart the docker daemon

systemctl restart docker

---containers will run on jenkins---

********open jenkins ec2 machine******** from jenkins we are going to push the docker
sudo su -
create a file  vi /etc/docker/daemon.json
{
        "insecure-registries" : ["182.252.133.70:5000"]  -- have to give nexus ip
}

service docker restart
cat /etc/docker/daemon.json

copy the full jenkins file from github


go to jenkins
click on configure
click on pipeline tab and paste the code
save

click on build now

--------------------

go and check the nexus site can able to see the files 


************prometheus**************Monitoring tool
now we are going do prometheus container to be run in docker container
---------------------------------------------------------------
docker run -it -d --name prom -v /etc/prometheus:/etc/prometheus -p 9090:9090 prom/prometheus 
To run advisor container in tomcat machine
docker run -d --name cadvisor -p 8081:8080 -v /:/rootfs:ro -v /var/run:/var/run:rw -v /sys:/sys:ro -v /var/lib/docker/:/var/lib/docker:ro google/cadvisor
----------------------------------------------------------------------

running the prometheus in nexus machine above commands

---

sudo su -
Installing prometheus
docker run -it -d --name prom -v /etc/prometheus:/etc/prometheus -p 9090:9090 prom/prometheus

docker ps
docker ps -a
docker logs containerid
error came

cd /etc/prometheus/
ls -ltr

https://docs.docker.com/config/thirdparty/prometheus/  --- copy the prometheus config file

vi prometheus.yml
:wq

docker start containerid
docker ps   - prometheus up port 9090

nexus machine
ip:9090 in google

prometheus page will display

----notes---

1. binaries install
2. docker container


***need some agent for prometheus to send the data**(to know about the conatiner information we are using agents) 
1. node exporter
2. alert manager
3. cadvisor  -- container advisor
MONITORING DOCKER CONTAINER METRICS USING CADVISOR

https://prometheus.io/docs/guides/cadvisor/

cAdvisor (short for container Advisor) analyzes and exposes resource usage and performance data from running containers. cAdvisor exposes Prometheus metrics out of the box. In this guide, we will:

create a local multi-container Docker Compose installation that includes containers running Prometheus, cAdvisor, and a Redis server, respectively
examine some container metrics produced by the Redis container, collected by cAdvisor, and scraped by Prometheus

------------------------

******Need to install cadvisor in jenkins machine (beacuse docker will run in this machine)*****
sudo su -
docker ps
docker run -d --name cadvisor -p 8081:8080 -v /:/rootfs:ro -v /var/run:/var/run:rw -v /sys:/sys:ro -v /var/lib/docker/:/var/lib/docker:ro google/cadvisor

running cadvisor by using the above command

docker ps
--it will display cadvisor containerid

copy the <machine id>:8081  -- it will display the cadvisor page

--cadvisor is a metrics

copy the cadvisor ip address and going to prometheus machinee which is in nexus

******nexus machine*****

sudo su -
cd /etc/prometheus/
ls -ltr
vi prometheus.yml

in that file 

on static_configs:
	- target: [ paste the ip address:8081]  -- cadvisor ip & port number

docker ps
docker restart containerid 
docker ps

-------

now go to prometheus site

can enter the query for ex cpu usage and v can able to c the chart

promethesus disadvantage:
not user friendly
for dashboard they will use grafana

https://grafana.com/grafana/dashboards

*******GIT JENKINS INTEGRATION STEPS***********
go the repository in github
go to settings use webhook mechanisam
click on add webhook and gice jenkins urls that means ip
click add webhook at last


----go to configure in jenkins
check on github project
give github url

check on github hook trigger for GIThubScm polling

upa


















































































  























  
  
  




















































































 






























































































































  
  
  
  
  
  













 














